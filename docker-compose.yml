services:
#  api:
#    image: api:latest
#    build:
#      context: .
#      dockerfile: src/Api/Dockerfile
#    ports:
#      - "2309:2309"  # Single port for both API and Next.js app
#    environment:
#      - ASPNETCORE_ENVIRONMENT=Development
#      - ASPNETCORE_URLS=http://+:2309
#      - ConnectionStrings__Redis=redis://redis:6379
#      - ConnectionStrings__Postgres=Host=postgres:5432;Database=taskmanager;Username=postgres;Password=postgres
#      - ConnectionStrings__EventStore=esdb://eventDb:2113?tls=false
#      - NEW_RELIC_REGION=eu
#    depends_on:
#      redis:
#        condition: service_healthy
#      postgres:
#        condition: service_healthy
#      eventstore:
#        condition: service_healthy
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:2309/health"]
#      interval: 5s
#      timeout: 5s
#      retries: 5
  
  redis:
    image: redis/redis-stack:latest
    ports:
      - "6379:6379"
      - "16379:8001"
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: taskmanager
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  eventstore:
    image: eventstore/eventstore:22.10.1-buster-slim
    container_name: eventDb
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_EXT_TCP_PORT=1113
      - EVENTSTORE_HTTP_PORT=2113
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
    ports:
      - "1113:1113"
      - "2113:2113"
    volumes:
      - eventstore-data:/var/lib/eventstore
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:2113/health/live || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 5
  
  agent:
    container_name: newrelic-infra
    build:
      context: ./src/Infrastructure/Telemetry/newrelic-infra
      dockerfile: newrelic-infra.dockerfile
    cap_add:
      - SYS_PTRACE
    network_mode: bridge
    pid: host
    privileged: true
    volumes:
      - "/:/host:ro"
      - "/var/run/docker.sock:/var/run/docker.sock"
    restart: unless-stopped

volumes:
  redis-data:
  redis-insight-data:
  postgres-data:
  eventstore-data: